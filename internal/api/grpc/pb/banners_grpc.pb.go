// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BannersClient is the client API for Banners service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannersClient interface {
	Banner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResult, error)
	Click(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*ClickResult, error)
	Banners(ctx context.Context, in *AllBannersRequest, opts ...grpc.CallOption) (*AllBannersResult, error)
	CreateBanner(ctx context.Context, in *CreateBannerRequest, opts ...grpc.CallOption) (*CreateBannerResult, error)
	UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*UpdateBannerResult, error)
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResult, error)
	BoundSlots(ctx context.Context, in *BoundSlotsRequest, opts ...grpc.CallOption) (*BoundSlotsResult, error)
	BindSlot(ctx context.Context, in *BindSlotRequest, opts ...grpc.CallOption) (*BindSlotResult, error)
	UnbindSlot(ctx context.Context, in *UnbindSlotRequest, opts ...grpc.CallOption) (*UnbindSlotResult, error)
}

type bannersClient struct {
	cc grpc.ClientConnInterface
}

func NewBannersClient(cc grpc.ClientConnInterface) BannersClient {
	return &bannersClient{cc}
}

func (c *bannersClient) Banner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResult, error) {
	out := new(BannerResult)
	err := c.cc.Invoke(ctx, "/api.Banners/Banner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) Click(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*ClickResult, error) {
	out := new(ClickResult)
	err := c.cc.Invoke(ctx, "/api.Banners/Click", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) Banners(ctx context.Context, in *AllBannersRequest, opts ...grpc.CallOption) (*AllBannersResult, error) {
	out := new(AllBannersResult)
	err := c.cc.Invoke(ctx, "/api.Banners/Banners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) CreateBanner(ctx context.Context, in *CreateBannerRequest, opts ...grpc.CallOption) (*CreateBannerResult, error) {
	out := new(CreateBannerResult)
	err := c.cc.Invoke(ctx, "/api.Banners/CreateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*UpdateBannerResult, error) {
	out := new(UpdateBannerResult)
	err := c.cc.Invoke(ctx, "/api.Banners/UpdateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResult, error) {
	out := new(DeleteBannerResult)
	err := c.cc.Invoke(ctx, "/api.Banners/DeleteBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) BoundSlots(ctx context.Context, in *BoundSlotsRequest, opts ...grpc.CallOption) (*BoundSlotsResult, error) {
	out := new(BoundSlotsResult)
	err := c.cc.Invoke(ctx, "/api.Banners/BoundSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) BindSlot(ctx context.Context, in *BindSlotRequest, opts ...grpc.CallOption) (*BindSlotResult, error) {
	out := new(BindSlotResult)
	err := c.cc.Invoke(ctx, "/api.Banners/BindSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersClient) UnbindSlot(ctx context.Context, in *UnbindSlotRequest, opts ...grpc.CallOption) (*UnbindSlotResult, error) {
	out := new(UnbindSlotResult)
	err := c.cc.Invoke(ctx, "/api.Banners/UnbindSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannersServer is the server API for Banners service.
// All implementations must embed UnimplementedBannersServer
// for forward compatibility
type BannersServer interface {
	Banner(context.Context, *BannerRequest) (*BannerResult, error)
	Click(context.Context, *ClickRequest) (*ClickResult, error)
	Banners(context.Context, *AllBannersRequest) (*AllBannersResult, error)
	CreateBanner(context.Context, *CreateBannerRequest) (*CreateBannerResult, error)
	UpdateBanner(context.Context, *UpdateBannerRequest) (*UpdateBannerResult, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResult, error)
	BoundSlots(context.Context, *BoundSlotsRequest) (*BoundSlotsResult, error)
	BindSlot(context.Context, *BindSlotRequest) (*BindSlotResult, error)
	UnbindSlot(context.Context, *UnbindSlotRequest) (*UnbindSlotResult, error)
	mustEmbedUnimplementedBannersServer()
}

// UnimplementedBannersServer must be embedded to have forward compatible implementations.
type UnimplementedBannersServer struct {
}

func (UnimplementedBannersServer) Banner(context.Context, *BannerRequest) (*BannerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Banner not implemented")
}
func (UnimplementedBannersServer) Click(context.Context, *ClickRequest) (*ClickResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Click not implemented")
}
func (UnimplementedBannersServer) Banners(context.Context, *AllBannersRequest) (*AllBannersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Banners not implemented")
}
func (UnimplementedBannersServer) CreateBanner(context.Context, *CreateBannerRequest) (*CreateBannerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedBannersServer) UpdateBanner(context.Context, *UpdateBannerRequest) (*UpdateBannerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedBannersServer) DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedBannersServer) BoundSlots(context.Context, *BoundSlotsRequest) (*BoundSlotsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoundSlots not implemented")
}
func (UnimplementedBannersServer) BindSlot(context.Context, *BindSlotRequest) (*BindSlotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindSlot not implemented")
}
func (UnimplementedBannersServer) UnbindSlot(context.Context, *UnbindSlotRequest) (*UnbindSlotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindSlot not implemented")
}
func (UnimplementedBannersServer) mustEmbedUnimplementedBannersServer() {}

// UnsafeBannersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannersServer will
// result in compilation errors.
type UnsafeBannersServer interface {
	mustEmbedUnimplementedBannersServer()
}

func RegisterBannersServer(s grpc.ServiceRegistrar, srv BannersServer) {
	s.RegisterService(&Banners_ServiceDesc, srv)
}

func _Banners_Banner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).Banner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Banners/Banner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).Banner(ctx, req.(*BannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_Click_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).Click(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Banners/Click",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).Click(ctx, req.(*ClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_Banners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllBannersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).Banners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Banners/Banners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).Banners(ctx, req.(*AllBannersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Banners/CreateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).CreateBanner(ctx, req.(*CreateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Banners/UpdateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).UpdateBanner(ctx, req.(*UpdateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Banners/DeleteBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_BoundSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoundSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).BoundSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Banners/BoundSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).BoundSlots(ctx, req.(*BoundSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_BindSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).BindSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Banners/BindSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).BindSlot(ctx, req.(*BindSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banners_UnbindSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersServer).UnbindSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Banners/UnbindSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersServer).UnbindSlot(ctx, req.(*UnbindSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Banners_ServiceDesc is the grpc.ServiceDesc for Banners service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Banners_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Banners",
	HandlerType: (*BannersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Banner",
			Handler:    _Banners_Banner_Handler,
		},
		{
			MethodName: "Click",
			Handler:    _Banners_Click_Handler,
		},
		{
			MethodName: "Banners",
			Handler:    _Banners_Banners_Handler,
		},
		{
			MethodName: "CreateBanner",
			Handler:    _Banners_CreateBanner_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _Banners_UpdateBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _Banners_DeleteBanner_Handler,
		},
		{
			MethodName: "BoundSlots",
			Handler:    _Banners_BoundSlots_Handler,
		},
		{
			MethodName: "BindSlot",
			Handler:    _Banners_BindSlot_Handler,
		},
		{
			MethodName: "UnbindSlot",
			Handler:    _Banners_UnbindSlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/banners.proto",
}
