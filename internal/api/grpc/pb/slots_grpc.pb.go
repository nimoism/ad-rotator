// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SlotsClient is the client API for Slots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlotsClient interface {
	Slots(ctx context.Context, in *AllSlotsRequest, opts ...grpc.CallOption) (*AllSlotsResult, error)
	CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...grpc.CallOption) (*CreateSlotResult, error)
	UpdateSlot(ctx context.Context, in *UpdateSlotRequest, opts ...grpc.CallOption) (*UpdateSlotResult, error)
	DeleteSlot(ctx context.Context, in *DeleteSlotRequest, opts ...grpc.CallOption) (*DeleteSlotResult, error)
}

type slotsClient struct {
	cc grpc.ClientConnInterface
}

func NewSlotsClient(cc grpc.ClientConnInterface) SlotsClient {
	return &slotsClient{cc}
}

func (c *slotsClient) Slots(ctx context.Context, in *AllSlotsRequest, opts ...grpc.CallOption) (*AllSlotsResult, error) {
	out := new(AllSlotsResult)
	err := c.cc.Invoke(ctx, "/api.Slots/Slots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slotsClient) CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...grpc.CallOption) (*CreateSlotResult, error) {
	out := new(CreateSlotResult)
	err := c.cc.Invoke(ctx, "/api.Slots/CreateSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slotsClient) UpdateSlot(ctx context.Context, in *UpdateSlotRequest, opts ...grpc.CallOption) (*UpdateSlotResult, error) {
	out := new(UpdateSlotResult)
	err := c.cc.Invoke(ctx, "/api.Slots/UpdateSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slotsClient) DeleteSlot(ctx context.Context, in *DeleteSlotRequest, opts ...grpc.CallOption) (*DeleteSlotResult, error) {
	out := new(DeleteSlotResult)
	err := c.cc.Invoke(ctx, "/api.Slots/DeleteSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlotsServer is the server API for Slots service.
// All implementations must embed UnimplementedSlotsServer
// for forward compatibility
type SlotsServer interface {
	Slots(context.Context, *AllSlotsRequest) (*AllSlotsResult, error)
	CreateSlot(context.Context, *CreateSlotRequest) (*CreateSlotResult, error)
	UpdateSlot(context.Context, *UpdateSlotRequest) (*UpdateSlotResult, error)
	DeleteSlot(context.Context, *DeleteSlotRequest) (*DeleteSlotResult, error)
	mustEmbedUnimplementedSlotsServer()
}

// UnimplementedSlotsServer must be embedded to have forward compatible implementations.
type UnimplementedSlotsServer struct {
}

func (UnimplementedSlotsServer) Slots(context.Context, *AllSlotsRequest) (*AllSlotsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Slots not implemented")
}
func (UnimplementedSlotsServer) CreateSlot(context.Context, *CreateSlotRequest) (*CreateSlotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlot not implemented")
}
func (UnimplementedSlotsServer) UpdateSlot(context.Context, *UpdateSlotRequest) (*UpdateSlotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSlot not implemented")
}
func (UnimplementedSlotsServer) DeleteSlot(context.Context, *DeleteSlotRequest) (*DeleteSlotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSlot not implemented")
}
func (UnimplementedSlotsServer) mustEmbedUnimplementedSlotsServer() {}

// UnsafeSlotsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlotsServer will
// result in compilation errors.
type UnsafeSlotsServer interface {
	mustEmbedUnimplementedSlotsServer()
}

func RegisterSlotsServer(s grpc.ServiceRegistrar, srv SlotsServer) {
	s.RegisterService(&Slots_ServiceDesc, srv)
}

func _Slots_Slots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlotsServer).Slots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Slots/Slots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlotsServer).Slots(ctx, req.(*AllSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slots_CreateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlotsServer).CreateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Slots/CreateSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlotsServer).CreateSlot(ctx, req.(*CreateSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slots_UpdateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlotsServer).UpdateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Slots/UpdateSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlotsServer).UpdateSlot(ctx, req.(*UpdateSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slots_DeleteSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlotsServer).DeleteSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Slots/DeleteSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlotsServer).DeleteSlot(ctx, req.(*DeleteSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Slots_ServiceDesc is the grpc.ServiceDesc for Slots service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Slots_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Slots",
	HandlerType: (*SlotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Slots",
			Handler:    _Slots_Slots_Handler,
		},
		{
			MethodName: "CreateSlot",
			Handler:    _Slots_CreateSlot_Handler,
		},
		{
			MethodName: "UpdateSlot",
			Handler:    _Slots_UpdateSlot_Handler,
		},
		{
			MethodName: "DeleteSlot",
			Handler:    _Slots_DeleteSlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/slots.proto",
}
